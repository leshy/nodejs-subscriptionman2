// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, Core, ObjectMatcher, SimplestMatcher, async, exists, _,
    __slice = [].slice;

  _ = require('underscore');

  async = require('async');

  Backbone = require('backbone4000');

  SimplestMatcher = Backbone.Model.extend4000({
    match: function(value, pattern) {
      return value === pattern;
    }
  });

  exists = exports.exists = new Object();

  ObjectMatcher = Backbone.Model.extend4000({
    match: function(value, pattern) {
      if (pattern === exists) {
        return true;
      }
      return !_.find(pattern, function(checkvalue, key) {
        if (!value[key]) {
          return true;
        }
        if (checkvalue !== exists && value[key] !== checkvalue) {
          return true;
        }
        return false;
      });
    }
  });

  Core = exports.Core = Backbone.Model.extend4000({
    initialize: function() {
      this.counter = 0;
      return this.subscriptions = {};
    },
    subscribe: function(pattern, callback, name) {
      var _this = this;
      if (name == null) {
        name = this.counter++;
      }
      if (!callback && pattern.constructor === Function) {
        callback = pattern;
        pattern = true;
      }
      this.subscriptions[name] = {
        pattern: pattern,
        callback: callback
      };
      this.trigger('subscribe', name);
      return function() {
        delete _this.subscriptions[name];
        return _this.trigger('unsubscribe', name);
      };
    },
    event: function() {
      var MatchedSubscriptions, value, values,
        _this = this;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      value = _.first(values);
      MatchedSubscriptions = _.filter(_.values(this.subscriptions), function(subscription) {
        return _this.match(value, subscription.pattern);
      });
      return _.map(MatchedSubscriptions, function(subscription) {
        return subscription.callback.apply(this, values);
      });
    }
  });

}).call(this);
